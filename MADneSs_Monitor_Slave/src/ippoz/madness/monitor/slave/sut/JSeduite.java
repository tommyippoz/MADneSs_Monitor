/**
 * 
 */
package ippoz.madness.monitor.slave.sut;
import ippoz.madness.commons.support.AppLogger;
import ippoz.madness.commons.support.AppUtility;

import java.io.File;
import java.io.IOException;

/**
 * The Class JSeduite. Used for testing JSeduite
 *
 * @author ippoz
 */
public class JSeduite extends SUT {

	/**
	 * Instantiates a new jSeduite SUT.
	 *
	 * @param name the name
	 * @param prefFile the preferences file
	 */
	public JSeduite(String name, File prefFile) {
		super(name, prefFile);
	}
	
	/* (non-Javadoc)
	 * @see ippoz.madness.monitor.slave.sut.SUT#startSUT()
	 */
	@Override
	public void startSUT() throws IOException, InterruptedException {
		super.startSUT();
		AppUtility.runScript("pkill -f firefox", null, false, true, true);
	}

	/* (non-Javadoc)
	 * @see ippoz.madness.monitor.slave.sut.SUT#shutdownSUT()
	 */
	@Override
	public void shutdownSUT() throws IOException, InterruptedException {
		super.shutdownSUT();
		AppUtility.runScript("pkill -f firefox", null, false, true, true);
		removeLogs();
	}
	
	/**
	 * Removes the logs that are generated by jSeduite to reduce space occupation.
	 */
	private void removeLogs() {
		int count = 0;
		File logFileFolder;
		if(sutFolder != null && new File(sutFolder).exists()){
			logFileFolder = new File(sutFolder + "/domains/domain1/logs");
			for(File lf : logFileFolder.listFiles()){
				if(lf.getName().contains("server.log")){
					lf.delete();
					count++;
				}
			}
			AppLogger.logInfo(getClass(), count + " log files cleared");
		}
	}

	/* (non-Javadoc)
	 * @see ippoz.madness.monitor.slave.sut.SUT#hasInjection(java.lang.String)
	 */
	@Override
	public boolean hasInjection(String toCompare) {
		return toCompare.equals("CPU") || toCompare.equals("DISK") || toCompare.equals("NETWORK") ||
				toCompare.equals("MEMORY") || toCompare.equals("DEADLOCK") || toCompare.equals("NET_PERM");
	}

}
